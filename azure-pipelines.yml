stages:
  - stage: 'print_info'
    displayName: 'Print Information'
    jobs:
      - job: 'ubuntu_1804'
        displayName: 'ubuntu-18.04'
        pool:
          vmImage: 'ubuntu-18.04'
        steps:
          - checkout: none
          - task: Bash@3
            displayName: 'Print Information'
            inputs:
              failOnStderr: false
              noProfile: true
              noRc: true
              targetType: 'inline'
              script: |
                echo '========== User Information =========='
                id $(whoami)
                echo '========== Environment Variables =========='
                printenv
                echo '========== Pipeline Variables =========='
                echo 'Agent.BuildDirectory=$(Agent.BuildDirectory)'
                echo 'Agent.HomeDirectory=$(Agent.HomeDirectory)'
                echo 'Agent.Id=$(Agent.Id)'
                echo 'Agent.JobName=$(Agent.JobName)'
                echo 'Agent.JobStatus=$(Agent.JobStatus)'
                echo 'Agent.MachineName=$(Agent.MachineName)'
                echo 'Agent.Name=$(Agent.Name)'
                echo 'Agent.OS=$(Agent.OS)'
                echo 'Agent.OSArchitecture=$(Agent.OSArchitecture)'
                echo 'Agent.TempDirectory=$(Agent.TempDirectory)'
                echo 'Agent.ToolsDirectory=$(Agent.ToolsDirectory)'
                echo 'Agent.WorkFolder=$(Agent.WorkFolder)'
                echo 'Build.ArtifactStagingDirectory=$(Build.ArtifactStagingDirectory)'
                echo 'Build.BuildId=$(Build.BuildId)'
                echo 'Build.BuildNumber=$(Build.BuildNumber)'
                echo 'Build.BuildUri=$(Build.BuildUri)'
                echo 'Build.BinariesDirectory=$(Build.BinariesDirectory)'
                echo 'Build.ContainerId=$(Build.ContainerId)'
                echo 'Build.DefinitionName=$(Build.DefinitionName)'
                echo 'Build.DefinitionVersion=$(Build.DefinitionVersion)'
                echo 'Build.QueuedBy=$(Build.QueuedBy)'
                echo 'Build.QueuedById=$(Build.QueuedById)'
                echo 'Build.Reason=$(Build.Reason)'
                echo 'Build.Repository.Clean=$(Build.Repository.Clean)'
                echo 'Build.Repository.LocalPath=$(Build.Repository.LocalPath)'
                echo 'Build.Repository.ID=$(Build.Repository.ID)'
                echo 'Build.Repository.Name=$(Build.Repository.Name)'
                echo 'Build.Repository.Provider=$(Build.Repository.Provider)'
                echo 'Build.Repository.Tfvc.Workspace=$(Build.Repository.Tfvc.Workspace)'
                echo 'Build.Repository.Uri=$(Build.Repository.Uri)'
                echo 'Build.RequestedFor=$(Build.RequestedFor)'
                echo 'Build.RequestedForEmail=$(Build.RequestedForEmail)'
                echo 'Build.RequestedForId=$(Build.RequestedForId)'
                echo 'Build.SourceBranch=$(Build.SourceBranch)'
                echo 'Build.SourceBranchName=$(Build.SourceBranchName)'
                echo 'Build.SourcesDirectory=$(Build.SourcesDirectory)'
                echo 'Build.SourceVersion=$(Build.SourceVersion)'
                echo 'Build.SourceVersionMessage=$(Build.SourceVersionMessage)'
                echo 'Build.StagingDirectory=$(Build.StagingDirectory)'
                echo 'Build.Repository.Git.SubmoduleCheckout=$(Build.Repository.Git.SubmoduleCheckout)'
                echo 'Build.SourceTfvcShelveset=$(Build.SourceTfvcShelveset)'
                echo 'Build.TriggeredBy.BuildId=$(Build.TriggeredBy.BuildId)'
                echo 'Build.TriggeredBy.DefinitionId=$(Build.TriggeredBy.DefinitionId)'
                echo 'Build.TriggeredBy.DefinitionName=$(Build.TriggeredBy.DefinitionName)'
                echo 'Build.TriggeredBy.BuildNumber=$(Build.TriggeredBy.BuildNumber)'
                echo 'Build.TriggeredBy.ProjectID=$(Build.TriggeredBy.ProjectID)'
                echo 'Common.TestResultsDirectory=$(Common.TestResultsDirectory)'
                echo 'Pipeline.Workspace=$(Pipeline.Workspace)'
                echo 'Environment.Name=$(Environment.Name)'
                echo 'Environment.Id=$(Environment.Id)'
                echo 'Environment.ResourceName=$(Environment.ResourceName)'
                echo 'Environment.ResourceId=$(Environment.ResourceId)'
                echo '========== OS Information =========='
                cat /etc/os-release
                echo '========== Tool Version =========='
                command -v az
                az version
                command -v kubectl
                kubectl version --client=true
                command -v helm
                helm version
                command -v terraform
                terraform version
                command -v azcopy
                azcopy --version
                command -v aws
                aws --version
      - job: 'ubuntu_1604'
        displayName: 'ubuntu-16.04'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - checkout: none
          - task: Bash@3
            displayName: 'Print Information'
            inputs:
              failOnStderr: false
              noProfile: true
              noRc: true
              targetType: 'inline'
              script: |
                echo '========== User Information =========='
                id $(whoami)
                echo '========== Environment Variables =========='
                printenv
                echo '========== Pipeline Variables =========='
                echo 'Agent.BuildDirectory=$(Agent.BuildDirectory)'
                echo 'Agent.HomeDirectory=$(Agent.HomeDirectory)'
                echo 'Agent.Id=$(Agent.Id)'
                echo 'Agent.JobName=$(Agent.JobName)'
                echo 'Agent.JobStatus=$(Agent.JobStatus)'
                echo 'Agent.MachineName=$(Agent.MachineName)'
                echo 'Agent.Name=$(Agent.Name)'
                echo 'Agent.OS=$(Agent.OS)'
                echo 'Agent.OSArchitecture=$(Agent.OSArchitecture)'
                echo 'Agent.TempDirectory=$(Agent.TempDirectory)'
                echo 'Agent.ToolsDirectory=$(Agent.ToolsDirectory)'
                echo 'Agent.WorkFolder=$(Agent.WorkFolder)'
                echo 'Build.ArtifactStagingDirectory=$(Build.ArtifactStagingDirectory)'
                echo 'Build.BuildId=$(Build.BuildId)'
                echo 'Build.BuildNumber=$(Build.BuildNumber)'
                echo 'Build.BuildUri=$(Build.BuildUri)'
                echo 'Build.BinariesDirectory=$(Build.BinariesDirectory)'
                echo 'Build.ContainerId=$(Build.ContainerId)'
                echo 'Build.DefinitionName=$(Build.DefinitionName)'
                echo 'Build.DefinitionVersion=$(Build.DefinitionVersion)'
                echo 'Build.QueuedBy=$(Build.QueuedBy)'
                echo 'Build.QueuedById=$(Build.QueuedById)'
                echo 'Build.Reason=$(Build.Reason)'
                echo 'Build.Repository.Clean=$(Build.Repository.Clean)'
                echo 'Build.Repository.LocalPath=$(Build.Repository.LocalPath)'
                echo 'Build.Repository.ID=$(Build.Repository.ID)'
                echo 'Build.Repository.Name=$(Build.Repository.Name)'
                echo 'Build.Repository.Provider=$(Build.Repository.Provider)'
                echo 'Build.Repository.Tfvc.Workspace=$(Build.Repository.Tfvc.Workspace)'
                echo 'Build.Repository.Uri=$(Build.Repository.Uri)'
                echo 'Build.RequestedFor=$(Build.RequestedFor)'
                echo 'Build.RequestedForEmail=$(Build.RequestedForEmail)'
                echo 'Build.RequestedForId=$(Build.RequestedForId)'
                echo 'Build.SourceBranch=$(Build.SourceBranch)'
                echo 'Build.SourceBranchName=$(Build.SourceBranchName)'
                echo 'Build.SourcesDirectory=$(Build.SourcesDirectory)'
                echo 'Build.SourceVersion=$(Build.SourceVersion)'
                echo 'Build.SourceVersionMessage=$(Build.SourceVersionMessage)'
                echo 'Build.StagingDirectory=$(Build.StagingDirectory)'
                echo 'Build.Repository.Git.SubmoduleCheckout=$(Build.Repository.Git.SubmoduleCheckout)'
                echo 'Build.SourceTfvcShelveset=$(Build.SourceTfvcShelveset)'
                echo 'Build.TriggeredBy.BuildId=$(Build.TriggeredBy.BuildId)'
                echo 'Build.TriggeredBy.DefinitionId=$(Build.TriggeredBy.DefinitionId)'
                echo 'Build.TriggeredBy.DefinitionName=$(Build.TriggeredBy.DefinitionName)'
                echo 'Build.TriggeredBy.BuildNumber=$(Build.TriggeredBy.BuildNumber)'
                echo 'Build.TriggeredBy.ProjectID=$(Build.TriggeredBy.ProjectID)'
                echo 'Common.TestResultsDirectory=$(Common.TestResultsDirectory)'
                echo 'Pipeline.Workspace=$(Pipeline.Workspace)'
                echo 'Environment.Name=$(Environment.Name)'
                echo 'Environment.Id=$(Environment.Id)'
                echo 'Environment.ResourceName=$(Environment.ResourceName)'
                echo 'Environment.ResourceId=$(Environment.ResourceId)'
                echo '========== OS Information =========='
                cat /etc/os-release
                echo '========== Tool Version =========='
                command -v az
                az version
                command -v kubectl
                kubectl version --client=true
                command -v helm
                helm version
                command -v terraform
                terraform version
                command -v azcopy
                azcopy --version
                command -v aws
                aws --version
  - stage: 'install_tools'
    displayName: 'Install Tools'
    jobs:
      - job: 'install_tools'
        displayName: 'Install Tools'
        pool:
          vmImage: 'ubuntu-18.04'
        steps:
          - checkout: none
          - task: Bash@3
            displayName: 'Install Terraform'
            inputs:
              failOnStderr: true
              noProfile: true
              noRc: true
              targetType: 'inline'
              script: |
                curl -sL https://releases.hashicorp.com/terraform/0.12.28/terraform_0.12.28_linux_amd64.zip -o terraform.zip
                unzip terraform.zip
                mv terraform $(Agent.ToolsDirectory)
          - task: Bash@3
            displayName: 'Install Helm'
            inputs:
              failOnStderr: true
              noProfile: true
              noRc: true
              targetType: 'inline'
              script: |
                curl -sL https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz -o helm.tgz
                tar -xvzf helm.tgz
                mv linux-amd64/helm $(Agent.ToolsDirectory)
          - task: Bash@3
            displayName: 'Print Tool Info'
            inputs:
              failOnStderr: false
              noProfile: true
              noRc: true
              targetType: 'inline'
              script: |
                PATH=$(Agent.ToolsDirectory):$PATH
                command -v terraform
                terraform version
                command -v helm
                helm version